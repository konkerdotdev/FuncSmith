import { stringToUint8Array } from '@konker.dev/tiny-filesystem-fp/dist/lib/array';

import type { FileSetItem } from '../../lib/fileSet';
import { FileSetItemType } from '../../lib/fileSet';

export const TEST_FILE_SET_1: Array<FileSetItem> = [
  {
    _tag: FileSetItemType.File,
    _id: '0000000000001111111111112222222222220001',
    path: '/tmp/foo/a.txt',
    baseDir: '/tmp/foo',
    relPath: 'a.txt',
    relDir: '.',
    fileName: 'a.txt',
    fileBase: 'a',
    fileExt: '.txt',
    contents: stringToUint8Array('A'),
  },
  {
    _tag: FileSetItemType.File,
    _id: '0000000000001111111111112222222222220002',
    path: '/tmp/foo/b.txt',
    baseDir: '/tmp/foo',
    relPath: 'b.txt',
    relDir: '.',
    fileName: 'b.txt',
    fileBase: 'b',
    fileExt: '.txt',
    contents: stringToUint8Array('B'),
  },
  {
    _tag: FileSetItemType.File,
    _id: '0000000000001111111111112222222222220003',
    path: '/tmp/foo/c.csv',
    baseDir: '/tmp/foo',
    relPath: 'c.csv',
    relDir: '.',
    fileName: 'c.csv',
    fileBase: 'c',
    fileExt: '.csv',
    contents: stringToUint8Array('bam,baz\ntrue,false\n'),
  },
  {
    _tag: FileSetItemType.File,
    _id: '0000000000001111111111112222222222220004',
    path: '/tmp/foo/d.json',
    baseDir: '/tmp/foo',
    relPath: 'd.json',
    relDir: '.',
    fileName: 'd.json',
    fileBase: 'd',
    fileExt: '.json',
    contents: stringToUint8Array('{"bam": true, "baz":  false }'),
  },
  {
    _tag: FileSetItemType.File,
    _id: '0000000000001111111111112222222222220005',
    path: '/tmp/foo/bar/e.txt',
    baseDir: '/tmp/foo',
    relPath: 'bar/e.txt',
    relDir: 'bar',
    fileName: 'e.txt',
    fileBase: 'e',
    fileExt: '.txt',
    contents: stringToUint8Array('E'),
  },
  {
    _tag: FileSetItemType.File,
    _id: '0000000000001111111111112222222222220006',
    path: '/tmp/foo/bar/f.log',
    baseDir: '/tmp/foo',
    relPath: 'bar/f.log',
    relDir: 'bar',
    fileName: 'f.log',
    fileBase: 'f',
    fileExt: '.log',
    contents: stringToUint8Array('F'),
  },
] as const;
